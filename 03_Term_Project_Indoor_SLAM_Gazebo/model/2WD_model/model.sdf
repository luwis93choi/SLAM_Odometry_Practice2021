<!-- Reference : How to Simulate a Robot Using Gazebo and ROS 2 (https://automaticaddison.com/how-to-simulate-a-robot-using-gazebo-and-ros-2/#Launch_Your_Robot_and_Warehouse_Using_ROS_2) -->

<!--
    Gazebo ROS differential drive plugin

    Send topics commands:
        ros2 topic pub /demo/cmd_vel geometry_msgs/msg/Twist '{linear: {x: 0.05}}' -1
        ros2 topic pub /demo/cmd_vel goemetry_msgs/msg/Twist '{angular: {z: 0.01}}' -1

    Listen topics commands:
        ros2 topic echo /demo/odom

    Listen TF:
        ros2 run tf2_ros tf2_echo odom chassis
        ros2 run tf2_ros tf2_echo chassis right_wheel
        ros2 run tf2_ros tf2_echo chassis left_wheel
-->

<sdf version='1.5'>
    <model name='2WD_agent'>
    
        <!-- Define the model as a moving object -->
        <static>false</static>

        <!-- Rectangular base of the robot -->
        <link name='chassis'>
        
            <!-- Position of the center will be: -->
            <!-- X = 0m | Y = 0m | Z = 0.1m -->

            <!-- Orientation of the center will be: -->
            <!-- Roll = 0 rad | Pitch = 0 rad | Yaw = 0 rad -->
            <pose>0 0 0.04 0 0 0</pose>

            <inertial>
                <mass>100.0</mass>
                <pose>0.0 0 0.1 0 0 0</pose>
                <inertia>
                    <ixx>0.5</ixx>
                    <iyy>1.0</iyy>
                    <izz>0.1</izz>
                </inertia>
            </inertial>

            <!-- [Base of 2WD Vehicle] -->
            <!-- Define the shape of collision area of base -->
            <collision name='collision'>
                <geometry>
                    <box>
                        <!-- Box-shaped collision area with 0.4m in length, 0.2m in width, and 0.1m in height -->
                        <size>0.4 0.2 0.1</size>
                    </box>
                </geometry>
            </collision>

            <!-- Define the visual representation of the base -->
            <visual name='visual'>
                <geometry>
                    <box>
                        <!-- Define visual shape of the base as box with same collision area -->
                        <size>0.4 0.2 0.1</size>
                    </box>
                </geometry>
            </visual>

            <!-- [Front Caster Wheel] -->
            <!-- Define the shape of collision area of caster wheel -->
            <collision name='caster_collision'>
                <pose>-0.1 0 -0.04 0 0 0</pose>
                <geometry>
                    <sphere>
                        <radius>0.03</radius>
                    </sphere>
                </geometry>

                <!-- Assign friction property to the wheel -->
                <surface>
                    <friction>
                        <ode>
                            <!-- Coefficients for friction -->
                            <mu>0</mu>
                            <mu2>0</mu2>
                            <!-- Force dependent slip -->
                            <slip1>1.0</slip1>
                            <slip2>1.0</slip2>
                        </ode>
                    </friction>
                </surface>
            </collision>

            <!-- Define visual shape of the caster wheel -->
            <visual name='caster_visual'>
                <pose>-0.1 0 -0.04 0 0 0</pose>
                <geometry>
                    <sphere>
                        <radius>0.03</radius>
                    </sphere>
                </geometry>
            </visual>
        </link>

        <!-- [Left Wheel] -->
        <link name='left_wheel'>
            <pose>0.12 0.19 0.03 0 1.5707 1.5707</pose>
            
            <collision name='collision'>
                <geometry>
                    <cylinder>
                        <radius>0.06</radius>
                        <length>0.08</length>
                    </cylinder>
                </geometry>
            </collision>

            <visual name='visual'>
                <geometry>
                    <cylinder>
                        <radius>0.06</radius>
                        <length>0.08</length>
                    </cylinder>
                </geometry>
                <material>
                    <ambient>0 0 0 1</ambient>
                </material>
            </visual>
        </link>

        <!-- [Left Wheel Motor/Joint] -->
        <joint type='revolute' name='left_wheel_hinge'>
            <pose>0 0 -0.03 0 0 0</pose>
            <parent>chassis</parent>
            <child>left_wheel</child>
            <axis>
                <xyz>0 0 1</xyz>
            </axis>
        </joint>

        <!-- [Right Wheel] -->
        <link name='right_wheel'>
            <pose>0.12 -0.19 0.03 0 1.5707 1.5707</pose>

            <collision name='collision'>
                <geometry>
                    <cylinder>
                        <radius>0.06</radius>
                        <length>0.08</length>
                    </cylinder>
                </geometry>
            </collision>

            <visual name='visual'>
                <geometry>
                    <cylinder>
                        <radius>0.06</radius>
                        <length>0.08</length>
                    </cylinder>
                </geometry>
                <material>
                    <ambient>0 0 0 1</ambient>
                </material>
            </visual>
        </link>

        <!-- [Right Wheel Motor/Joint] -->
        <joint type='revolute' name='right_wheel_hinge'>
            <pose>0 0 0.03 0 0 0</pose>
            <parent>chassis</parent>
            <child>right_wheel</child>
            <axis>
                <xyz>0 0 1</xyz>
            </axis>
        </joint>

        <!-- [LiDAR Sensor | Velodyne HDL 32] -->
        <link name='lidar_base'>

            <!-- Assign inertial property of LiDAR -->
            <inertial>
                <!-- Mass of LiDAR sensor in kg -->
                <mass>1.2</mass>
                <inertia>
                    <ixx>0.001087473</ixx>
                    <iyy>0.001087473</iyy>
                    <izz>0.001092437</izz>
                    <ixy>0</ixy>
                    <ixz>0</ixz>
                    <iyz>0</iyz>
                </inertia>
            </inertial>

            <!-- Position is towards the front of the robot -->
            <!-- LiDAR is mounted on the top -->
            <pose>0.15 0 0.12 0 0 0</pose>

            <collision name='base_collision'>
                <geometry>
                    <cylinder>
                        <!-- Radius and Length provided by Velodyne -->
                        <radius>0.04267</radius>
                        <length>0.05867</length>
                    </cylinder>
                </geometry>
            </collision>

            <visual name='base_visual'>
                <geometry>
                    <cylinder>
                        <!-- Radius and Length provided by Velodyne -->
                        <radius>0.04267</radius>
                        <length>0.05867</length>
                    </cylinder>
                </geometry>
                <material>
                    <ambient>0 0 1 1</ambient>
                </material>
            </visual>

        </link>

        <link name='lidar_top'>
        
            <!-- Assign inertial property of LiDAR -->
            <inertial>
                <!-- Mass of LiDAR sensor in kg -->
                <mass>0.1</mass>
                <inertia>
                    <ixx>0.000090623</ixx>
                    <iyy>0.000090623</iyy>
                    <izz>0.000091036</izz>
                    <ixy>0</ixy>
                    <ixz>0</ixz>
                    <iyz>0</iyz>
                </inertia>
            </inertial>

            <!-- Position is towards the front of the robot -->
            <!-- LiDAR is mounted on the top -->
            <pose>0.15 0 0.187 0 0 0</pose>

            <collision name='top_collision'>
                <geometry>
                    <cylinder>
                        <!-- Radius and Length provided by Velodyne -->
                        <radius>0.04267</radius>
                        <length>0.07357</length>
                    </cylinder>
                </geometry>
            </collision>

            <visual name='top_visual'>
                <geometry>
                    <cylinder>
                        <!-- Radius and Length provided by Velodyne -->
                        <radius>0.04267</radius>
                        <length>0.07357</length>
                    </cylinder>
                </geometry>
                <material>
                    <ambient>0 1 1 1</ambient>
                </material>
            </visual>

            <sensor type="gpu_ray" name="head_hokuyo_sensor">
                <pose>0 0 0.0175 0 0 0</pose>
                <visualize>true</visualize>
                <update_rate>40</update_rate>
                <ray>
                    <scan>
                        <horizontal>
                            <samples>720</samples>
                            <resolution>1</resolution>
                            <min_angle>-1.570796</min_angle>
                            <max_angle>1.570796</max_angle>
                        </horizontal>
                    </scan>
                    <range>
                        <min>0.10</min>
                        <max>30.0</max>
                        <resolution>0.01</resolution>
                    </range>
                    <noise>
                        <type>gaussian</type>
                        <mean>0.0</mean>
                        <stddev>0.01</stddev>
                    </noise>
                </ray>
                <plugin name="gazebo_ros_head_hokuyo_controller" filename="libgazebo_ros_gpu_laser.so">
                    <topicName>/scan</topicName>
                    <frameName>lidar_top</frameName>
                </plugin>   
            </sensor>
        </link>

        <link name='imu_link'>
            <pose>0 0 0.1 0 0 0</pose>
            <inertial>
                <mass>0.001</mass>
                <inertia>
                    <ixx>0.00001</ixx>
                    <iyy>0.00001</iyy>
                    <izz>0.000001</izz>
                    <ixy>0</ixy>
                    <ixz>0</ixz>
                    <iyz>0</iyz>
                </inertia>
            </inertial>

            <visual name='imu_visual'>
                <geometry>
                    <box>
                        <size>0.03 0.03 0.015</size>
                    </box>
                </geometry>

                <material>
                    <diffuse>1 0 0 1</diffuse>
                </material>
            </visual>

            <gravity>true</gravity>
            <sensor name="imu_sensor" type="imu">
                <always_on>true</always_on>
                <update_rate>100</update_rate>
                <visualize>true</visualize>
                <topic>__default_topic__</topic>
                <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
                    <topicName>imu</topicName>
                    <bodyName>imu_link</bodyName>
                    <updateRateHZ>10.0</updateRateHZ>
                    <gaussianNoise>0.0</gaussianNoise>
                    <xyzOffset>0 0 0</xyzOffset>
                    <rpyOffset>0 0 0</rpyOffset>
                    <frameName>imu_link</frameName>
                    <initialOrientationAsReference>false</initialOrientationAsReference>
                </plugin>
                <pose>0 0 0 0 0 0</pose>
            </sensor>
        </link>

        <joint type='fixed' name='lidar_joint'>
            <pose>0 0 -0.035 0 0 0</pose>
            <parent>lidar_base</parent>
            <child>lidar_top</child>
            <axis>
                <xyz>0 0 1</xyz>
            </axis>
        </joint>

        <joint type='fixed' name='imu_joint'>
            <pose>0 0 0 0 0 0</pose>
            <parent>chassis</parent>
            <child>imu_link</child>
            <axis>
                <xyz>0 0 1</xyz>
            </axis>
        </joint>

        <joint type='fixed' name='lidar_base_joint'>
            <parent>chassis</parent>
            <child>lidar_base</child>
        </joint>

        <!-- ROS2 plugin for 2WD differential drive joint control -->
        <plugin name='diff_drive' filename='libgazebo_ros_diff_drive.so'>
            <ros>
                <namespace>/agent_gazebo</namespace>        <!-- Namespace for current model's diff drive plugin topics -->
                <argument>cmd_vel:=cmd_vel</argument>       <!-- Name mapping for Linear & Angular Velocity Control Topics [geometry_msgs/msg/Twist] -->
                <argument>odom:=odom</argument>             <!-- Name mapping for Odometry Topics [nav_msgs/msg/Odometry] -->
            </ros>

            <!-- Wheels -->
            <left_joint>left_wheel_hinge</left_joint>       <!-- Name of joint / motor for left wheel -->
            <right_joint>right_wheel_hinge</right_joint>    <!-- Name of joint / motor for right wheel -->

            <!-- Kinematics -->
            <wheel_separation>0.26</wheel_separation>   <!-- Distance between the center of one wheel to the other [m] -->
            <wheel_diameter>0.2</wheel_diameter>        <!-- Diameter of wheels -->

            <!-- Limits -->
            <max_wheel_torque>20</max_wheel_torque>                 <!-- Max torque to be produced by wheel revolution [Nm] -->
            <max_wheel_acceleration>1.0</max_wheel_acceleration>    <!-- Max wheel acceleration for revolution [rad/s^2] -->

            <!-- ROS2 Message Output Setting -->
            <publish_odom>true</publish_odom>               <!-- Decide whether to publish odometry topic -->
            <publish_odom_tf>true</publish_odom_tf>         <!-- Decide whether to publish odometry tf -->
            <publish_wheel_tf>true</publish_wheel_tf>       <!-- Decide whether to publish wheel tf -->

            <!-- Frame -->
            <odometry_frame>odom</odometry_frame>               <!-- Odometry frame name -->
            <robot_base_frame>chassis</robot_base_frame>        <!-- Model base link frame name -->
        </plugin>

        <!--
        <plugin name='lidar_control' filename='libgazebo_ros_joint_state_publisher.so'>
            <joint_name>lidar_joint</joint_name>
        </plugin>
        --> 

    </model>
</sdf>